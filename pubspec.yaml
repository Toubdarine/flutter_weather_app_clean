name: flutter_weather_app_clean
description: A new Flutter project.
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: '>=2.19.6 <3.0.0'

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter


  
  # Provides the Cupertino icons used in iOS-style apps.
  cupertino_icons: ^1.0.2
  
  # A highly customizable color scheme package for Flutter, providing several predefined themes and the ability to create your own.
  flex_color_scheme: ^6.1.2
  
  # A routing library for Flutter that generates type-safe routes and named routes, simplifying navigation in your app.
  auto_route: ^6.3.0
  
  # A state management solution for Flutter that allows you to easily share state between widgets and manage state changes.
  provider: ^6.0.5
  
  # A service locator library for Flutter that allows you to easily retrieve dependencies from anywhere in your app.
  get_it: ^7.2.0
  
  # A package for making HTTP requests in Flutter, providing a high-level API and support for various HTTP features.
  http: ^0.13.5
  
  # A functional programming library for Dart that provides tools for handling common programming tasks such as optionals, error handling, and more.
  dartz: ^0.10.1
  
  # A library for comparing objects in Dart, providing a simple way to implement equality and hashcode methods.
  equatable: ^2.0.5
  
  # A package that loads environment variables from a .env file in your Flutter project, allowing you to store configuration data outside your code.
  flutter_dotenv: ^5.0.2
  
  # A package for internationalizing Flutter apps, providing support for formatting dates, times, numbers, and more.
  intl: ^0.18.1
  
  # A package for getting the device's location in Flutter, providing high-level APIs for getting the current location and tracking location changes.
  geolocator: ^9.0.2
  
  # A package for checking internet connectivity in Flutter, providing high-level APIs for checking network availability and monitoring connection changes.
  internet_connection_checker: ^1.0.0+1
  
  

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^2.0.0

  # A tool for generating files for Dart packages and apps, used for building and compiling code during development.
  build_runner: ^2.3.3
    
  # A code generator for the AutoRoute package, used to generate type-safe router helpers for your app's navigation system.
  auto_route_generator: ^6.0.0

  # mockito is a powerful Dart library for mocking objects and testing the interactions between them
  mockito: ^5.4.0
  
  # test is a Dart library for writing unit tests and integration tests
  test: ^1.22.0
    

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  assets:
     - ./.env

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages
